Tests sur les temps d'exécution, pour obtenir le 100 001° nb premier:
- fonction naive sur Python                         7.62
   (test tous les diviseurs entre 2 et sqrt(i))
- fonction optimisée à la main sur Python           ECHEC
   (pour ne pas tester que les diviseurs premiers)
- fonction numba-isée (autojit(nopython))           0.985
   (performances niveau C attendues)
- fonction naive en C                               0.281
   (compilée avec -O2)
- fonction optimisée à la main en C                 0.066
   (avec -O2)
- avec le crible en C                               0.012
   (avec -O2)
- fonction naive en LUA                             3.01
   (test tous les diviseurs entre 2 et sqrt(i))
- fonction naive optimisée en LUA                   2.96
   (iterateurs squizés par des i = i+1)
- fonction optimisée en LUA                         ECHEC
   (pour ne pas tester que les diviseurs premiers)
- fonction naive en LuaJIT                          0.433
   (test tous les diviseurs entre 2 et sqrt(i))
- fonction naive optimisée en LuaJIT                0.438
   (iterateurs squizés par des i = i+1)
- fonction optimisée en LUA                         ECHEC
   (pour ne pas tester que les diviseurs premiers)
- fonction naive en ASM x64                         0.823
   (écrite avec mes manoutes)

Python -> Numba :           x7.7
Python -> C :               x27
(Numba -> C) :              x3.5
Python Naif -> C Optim :    x120
Python Naif -> C Crible :   x600
Python -> LUA :             x2.5
LUA -> C :                  x11
Python -> LuaJIT :          x18
LuaJIT -> C :               x1.5
ASM_main -> C :             x4
